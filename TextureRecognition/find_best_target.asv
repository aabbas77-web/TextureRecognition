function [p0,a0,i0,e0] = find_best_target(v,p)
global eigentargets sMins sMaxs sCounts sCoeffs aCoeffs Emax;
global T max_count;
global coeff r cn;
global is_learning;

R = zeros(360,1);
p0 = 0;
a0 = 0;
i0 = 0;
e0 = 0;
for i=1:cn
    % coeffiect calculation
    y0 = v * eigentargets(:,i,p);
    coeff(1,i) = y0;
    
%         if((y0 < sMins(i,p)) || (y0 > sMaxs(i,p)))
%             p0 = 0;
%             a0 = 0;
%             i0 = 0;
%             e0 = 0;
%             break;
%         end;
%         if(~is_learning)
%             if(i > Emax(p,1))
%                 p0 = 0;
%                 a0 = 0;
%                 i0 = 0;
%                 e0 = 0;
%                 break;
%             end;
%         end;
        
        % polyline zeros
        M = sCounts(i,p);
        x = sCoeffs(i,1:M,1,p);
        y = sCoeffs(i,1:M,2,p);

        rk = 1;
        for ri=1:M-1
            x1 = x(ri);
            x2 = x(ri+1);
            y1 = y(ri);
            y2 = y(ri+1);
            if((y1 == y2) && (y0 == y1))
                r(rk,1) = x1;
                rk = rk + 1;
                r(rk,1) = x2;
                rk = rk + 1;
                disp('y(i) == y(i+1)');
            elseif(((y0 >= y1) && (y0 <= y2)) || ((y0 >= y2) && (y0 <= y1)))
                id = round(x1+(x2-x1)*(y0-y1)/(y2-y1));
                r(rk,1) = id;
                rk = rk + 1;
            end;
        end;

        % find best index
        for j=1:rk-1
            r0 = r(j);
            for u=max(1,r0-T):min(360,r0+T)
                R(u) = R(u) + 1;
            end;
        end;
        mx = max(R);
        if(mx < max_count)
            continue;
        end;
        ix = find(R >= mx);
        if(i < cn)
            
        else
        if(size(ix,1) ~= 1)
            continue;
        end;
        
        a0 = ix(1);
        p0 = p;
        i0 = i;
        
        e0 = sum(abs(aCoeffs(a0,1:i0,p0)-coeff(1,1:i0)))/i0;
%         if(~is_learning)
%             if(e0 > Emax(p0,2))
%                 p0 = 0;
%                 a0 = 0;
%                 i0 = 0;
%                 e0 = 0;
%                 break;
%             end;
%         end;
        break;
end;
%% EOF