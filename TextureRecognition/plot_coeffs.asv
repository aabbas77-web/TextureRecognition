%% Initialize MATLAB
close all;
clear all;
clc;
%%
global eigentargets sMins sMaxs sCounts sCoeffs aCoeffs;
global target_s target_s2 si f mean_target Emax objects objects_count objs max_th mask I is_learning global_scale n_targets0 n_objects;
load eigentargets_params Coeffs mean_target eigentargets eigen_values;
load settings targets target_s si f mask targets0 n_targets0;
load coefficients sCoeffs sCounts sMaxs sMins aCoeffs;
%%
H = 0;
W = H;
filename = '600.bmp';
src = read_grayscale_image(filename,H,W);
src = im2double(src);
figure;
imshow(src);
%%
M = [];
dm = 1;
for i=1:size(Coeffs,1)
    x = round(-sMins(1)+Coeffs(i,1,1))+1;
    y = round(-sMins(2)+Coeffs(i,2,1))+1;
    for j=-dm:dm
        for i=-dm:dm
            
            M(y+j,x+i) = 1;
        end;
    end;
end;
[hm,wm] = size(M);
figure;
imshow(M);
%% Create new folder
path = 'zooms/';
if(isdir(path) == 1)
    rmdir(path,'s');
end;
mkdir(path);
%% find all expected squares
[h0,w0] = size(src);
s = min(h0,w0);

tic;
figure;
hold on;
X = zeros(10000,1);
Y = zeros(10000,1);
X1 = zeros(10000,1);
Y1 = zeros(10000,1);
% for sq=1:1:1
% for sq=8:1:9
% for sq=8:1:max(1,s-8)
for sq=1:1:s
    cla;
    plot(Coeffs(:,1,1),Coeffs(:,2,1),'-b');
    
    H0 = h0-sq+target_s;
    W0 = w0-sq+target_s;
    ratio = min(H0/h0,W0/w0);
    dst = imresize(src,ratio,'lanczos3');
    proj = find_projections2(dst);
    k = 1;
    k1 = 1;
    for y0=1:size(proj,1)
        for x0=1:size(proj,2)
            X(k) = proj(y0,x0,1,1);
            Y(k) = proj(y0,x0,2,1);
            x = round(-sMins(1)+X(k))+1;
            y = round(-sMins(2)+Y(k))+1;
            if((x >= 1) && (x <= wm) && (y >= 1) && (y <= hm))
                if(M(y,x) == 1)
                    X1(k1) = X(k);
                    Y1(k1) = Y(k);
                    k1 = k1 + 1;
                end;
            end;
            k = k + 1;
        end;
    end;
    plot(X(1:k-1),Y(1:k-1),'.r');
    plot(X1(1:k1-1),Y1(1:k1-1),'.g');
    frame_name = [path 'zoom_' sprintf('%02.0f',sq)];
    saveas(gcf,frame_name,'emf');
end;
delay = toc;
disp(['elapsed time: [' num2str(delay) '] sec']);
%% EOF